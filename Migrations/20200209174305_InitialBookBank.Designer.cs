// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookBank.API.Domain.Persistence.Contexts;

namespace bookBank.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200209174305_InitialBookBank")]
    partial class InitialBookBank
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("bookBank.API.Domain.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            AuthorName = "Timothy"
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN_10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN_13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            Description = "Nine-year-old Meena can’t wait to grow up and break free from her parents. But, as the daughter of the only Punjabi family in the mining village of Tollington, her struggle for independence is different from most. Meena wants fishfingers and chips, not chapati and dhal; she wants an English Christmas, not the usual interminable Punjabi festivities – but more than anything, she wants to roam the backyards of working -class Tollington with feisty Anita Rutter and her gang.Blonde, cool, aloof, outrageous and sassy, Anita is everything Meena thinks she wants to be.Meena wheedles her way into Anita’s life, but the arrival of a baby brother, teenage hormones, impending entrance exams for the posh grammar school and a motorcycling rebel without a future threaten to turn Anita’s salad days sour. Anita and Me paints a comic, poignant, compassionate and colourful portrait of village life in the era of flares, power cuts, glam rock, decimalisation and Ted Heath. It is a unique vision of a British childhood in the Seventies, a childhood caught between two cultures, each on the brink of change.",
                            ISBN_10 = "0006548768",
                            ISBN_13 = "978-0006548768",
                            ImageUrl = "https://i.imgur.com/RwxM72M.jpg",
                            Price = 14.98m,
                            Title = "Anita and Me"
                        },
                        new
                        {
                            BookID = 2,
                            Description = "When the enemy is one of your own, the payback is twice as hard. The Butler brothers are the Kings of the East End, and their motto is 'what goes around, comes around'. In their world, family counts; so when the truth about Vinny's nephew's death comes to light, it rocks the Butlers to the core. One by one, Vinny's friends and family are turning against him. Then, the unimaginable happens - Vinny's little daughter Molly goes missing. She's the one chink of light in all their lives, and the one they'd commit murders to bring back. But is it already too late for that?",
                            ISBN_10 = "0007435053",
                            ISBN_13 = "978-0007435053",
                            ImageUrl = "https://i.imgur.com/0DK022r.jpg",
                            Price = 14.99m,
                            Title = "Payback"
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            AuthorID = 1
                        },
                        new
                        {
                            BookID = 2,
                            AuthorID = 1
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookBundle", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("BundleID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "BundleID");

                    b.HasIndex("BundleID");

                    b.ToTable("BookBundles");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            BundleID = 1
                        },
                        new
                        {
                            BookID = 2,
                            BundleID = 1
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookCategory", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            CategoryID = 1
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookPublisher", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "PublisherID");

                    b.HasIndex("PublisherID");

                    b.ToTable("BookPublishers");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            PublisherID = 1
                        },
                        new
                        {
                            BookID = 2,
                            PublisherID = 2
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Bundle", b =>
                {
                    b.Property<int>("BundleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BundleID");

                    b.ToTable("Bundles");

                    b.HasData(
                        new
                        {
                            BundleID = 1,
                            Price = 50m
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Genre = 3
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsID");

                    b.HasIndex("BookID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = 1,
                            PublisherName = "Jerome"
                        },
                        new
                        {
                            PublisherID = 2,
                            PublisherName = "Timothy"
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookAuthor", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookBundle", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookBundles")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Bundle", "Bundle")
                        .WithMany("BookBundles")
                        .HasForeignKey("BundleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookCategory", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookPublisher", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookPublishers")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Publisher", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Order", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.OrderDetails", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Review", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("Review")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.User", "User")
                        .WithMany("Review")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
