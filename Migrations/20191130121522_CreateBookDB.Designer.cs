// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookBank.API.Domain.Persistence.Contexts;

namespace bookBank.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191130121522_CreateBookDB")]
    partial class CreateBookDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("bookBank.API.Domain.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 101,
                            AuthorName = "Timothy"
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN_10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN_13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 101,
                            Description = "Tom",
                            ISBN_10 = "21412",
                            ISBN_13 = "19281",
                            ImageUrl = "/Images/Ben.jpg",
                            Price = 130m,
                            Title = "Tom"
                        },
                        new
                        {
                            BookID = 102,
                            Description = "Jerry",
                            ISBN_10 = "12121",
                            ISBN_13 = "92121",
                            ImageUrl = "/Images/Tom.jpg",
                            Price = 140m,
                            Title = "Jerry"
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookID = 101,
                            AuthorID = 101
                        },
                        new
                        {
                            BookID = 102,
                            AuthorID = 101
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookBundle", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("BundleID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "BundleID");

                    b.HasIndex("BundleID");

                    b.ToTable("BookBundles");
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookCategory", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookID = 101,
                            CategoryID = 101
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookPublisher", b =>
                {
                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.HasKey("BookID", "PublisherID");

                    b.HasIndex("PublisherID");

                    b.ToTable("BookPublishers");

                    b.HasData(
                        new
                        {
                            BookID = 101,
                            PublisherID = 101
                        },
                        new
                        {
                            BookID = 102,
                            PublisherID = 102
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Bundle", b =>
                {
                    b.Property<int>("BundleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BundleID");

                    b.ToTable("Bundles");
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 101,
                            Genre = 1
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = 101,
                            PublisherName = "Jerome"
                        },
                        new
                        {
                            PublisherID = 102,
                            PublisherName = "Timothy"
                        });
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookAuthor", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookBundle", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookBundles")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Bundle", "Bundle")
                        .WithMany("BookBundles")
                        .HasForeignKey("BundleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookCategory", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bookBank.API.Domain.Models.BookPublisher", b =>
                {
                    b.HasOne("bookBank.API.Domain.Models.Book", "Book")
                        .WithMany("BookPublishers")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookBank.API.Domain.Models.Publisher", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
